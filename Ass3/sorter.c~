#define CAPACITY 32

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <assert.h>

void usage(char *name);
void bubble_sort(int arr[], int len);
void min_elem_sort(int arr[], int len);
void print_arr(int arr[], int len);

void usage(char *name)
{
  fprintf(stderr, "usage: %s [-b] [-q] number1 [number2 ... ] (maximum 32 numbers)\n", name);
  exit(EXIT_FAILURE);
}

int main(int argc, char *argv[])
{
  int bubble = 0, output = 1;
  int i, pos = 0;
  int nums[CAPACITY];

  if (argc == 0)
    {
      usage(argv[0]);
    }
  
  for (i = 1; i < argc; i++)
    {
      if (strcmp(argv[i], "-b") == 0)
        {
          bubble = 1;
          continue;
        }
      if (strcmp(argv[i], "-q") == 0)
        {
          output = 0;
          continue;
        }

      if (pos == 32)
        {
          usage(argv[0]);
        }

      nums[pos++] = atoi(argv[i]);
      
    }

  if (pos == 0)
    {
      usage(argv[0]);
    }

  if (bubble)
    {
      bubble_sort(nums, pos);
    }
  else
    {
      min_elem_sort(nums, pos);
    }

  if (output)
    {
      print_arr(nums, pos);
    }
  
  return EXIT_SUCCESS;
}

void bubble_sort(int arr[], int len)
{
  int i;
  min_elem_sort(arr, len);
  for (i = 1; i < len; i++)
    {
        assert(arr[i] >= arr[i-1]);
    }
}

void min_elem_sort(int arr[], int len)
{
  int i, start, smallest, temp;

  for (start = 0; start < len; start++)
    {
      smallest = start;
      for (i = start; i < len; i++)
        {
          if (arr[i] < arr[smallest])
            {
              smallest = i;
            }
        }
      temp = arr[start];
      arr[start] = arr[smallest];
      arr[smallest] = temp;
    }

  for (i = 1; i < len; i++)
    {
        assert(arr[i] >= arr[i-1]);
    }
}

void print_arr(int arr[], int len)
{
  int i;

  for(i = 0; i < len; i++)
    {
      printf("%d\n", arr[i]);
    }
}
